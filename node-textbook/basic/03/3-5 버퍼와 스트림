1. 버퍼와 스트림은 파일을 읽고 쓸 때 한 덩어리로 처리하지 않고 작은 단위로 나눠서 처리하는 방법이다.


2. 버퍼
    : 버퍼는 임시 데이터를 저장하는 물리적인 메모리 공간을 가리킨다.
    파일을 읽어올 때 전체 내용을 한꺼번에 다 가져오지 않고 버퍼 하나의 크기 만큼만 가져온다.
    버퍼가 가득차면 그 내용을 전달해 준다.

    노드의 버퍼는 처음부터 크기가 고정돼 있고 내용이 이진값으로 저장된다.
    readFile함수에서 utf-8 옵션을 사용하거나 data에 toString 함수를 적용하면 버퍼 내용을 읽을 수 있는 문자열 형태로 바꿀 수 있다.

        const fs = require("fs");
        fs.readFile("example.txt", (err, data) => {
        if (err) {
            console.log(err);
        } else {
            console.log(data);  //이진데이터 표시
            console.log("\n");
            console.log(data.toString());   //문자열로 변환해서 표시
        }
        });
        // node buffer.js
        // <Buffer 4e 6f 64 65 2e 6a 73 20 69 73 20 61 6e 20 6f 70 65 6e 2d 73 6f 75 72 63 65 2c 20 63 72 6f 73 73 2d 70 6c 61 74 66 6f 72 6d 20 4a 61 76 61 53 63 72 69 ... 110 more bytes>

        // Node.js is an open-source, cross-platform JavaScript runtime environment.
        // Node.js는 Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임입니다.

    
3. 스트림
    : 스트림은 한 곳에서 다른 곳으로 데이터가 이동하는 흐름을 가리킨다.
    버퍼는 데이터를 메모리에 저장하고 직접 다룰 때 사용하고, 스트림은 데이터를 효율적으로 읽고 쓸 때 사용하는 개념이다.
    스트림은 버퍼를 사용해서 데이터를 처리하거나 전달하게 된다.

    스트림을 사용하면 파일 전체를 내려받지 않고도 차례로 처리할 수 있어서 시간을 절약할 수 있고, 메모리 사용량도
    최소화 할 수 있는 만큼 프로그램의 성능도 향상할 수 있다.

    노드에서의 스트림은 크게 Readable stream과 Writable stream, Duplex stream으로 나눌 수 있다.

    ---------------------------------------------------------------------------------------------------------------------------------
    | Readable Stream | 데이터를 읽기 위한 스트림이다. 네트워크로 연결해서 데이터를 읽어오거나 파일에서 데이터를 읽어올 때 사용한다.
    ---------------------------------------------------------------------------------------------------------------------------------
    | Writable Stream | 데이터를 쓰기 위한 스트림이다. 네트워크에 연결한 상태에서 데이터를 기록하거나 파일에 데이터를 기록할 때 사용한다.
    ---------------------------------------------------------------------------------------------------------------------------------
    | Duplex Stream   | 읽기와 쓰기 모두 가능한 스트림이다. 리더블 스트림과 라이터블 스트림을 결합한 형태라서 실시간 양방향 통신에 사용한다.
    ---------------------------------------------------------------------------------------------------------------------------------




    3.1. Readable stream
        : 주로 서버에서 용량이 큰 데이터를 가져올 때 자주 사용한다. 리더블 스트림을 사용하려면 fs모듈에 있는 createReadStream 함수를 사용한다.
        이 함수는 데이터를 작은 크기로 나누어서 읽어온다. 이 때 데이터를 읽어오는 작은 단위를 청크라고 한다.

        fs.createReadStream(경로, 내용[, 옵션])

            경로: 리더블 스틀미을 읽어올 파일 지정
            옵션: flags, encoding, fd, mode, autoClose, start, end ...
                - flags: 파일을 읽어올 때 사용할 플래그 지정. 기본값은 r
                - encoding: 인코딩 지정. 기본값은 null
                - fd: 파일을 여는 작업을 생략. 기본값은 null
                - mode: 파일 모드를 지정. 기본값은 0o666
                - autoClose: 읽기가 끝난 후 파일을 자동으로 닫을지 여부 결정. 기본값은 true
                - start: 파일을 읽기 싲가할 지점을 지정. 기본값은 0
                - end: 파일 읽기를 종료할 지점을 지정: 기본값은 infinity

        3.1.1. 리더블 스트림 이벤트
            : JS는 event driven 언어이다. 이벤트가 발생했을 때 처리하는 방식으로 프로그래밍하기 때문이다.
                리더블 스트림에서 사용할 수 있는 주요 이벤트는 아래와 같다.

            ---------------------------------------------------------------------------------------------------------------------------------
            | data | 데이터를 읽을 수 있을 때마다 발생하는 이벤트. 스트림에서 읽은 데이터를 처리할 때 data 이벤트를 사용한다.
            ---------------------------------------------------------------------------------------------------------------------------------
            | end  | 스트림에서 데이터를 모두 읽었을 때 사용하는 이벤트. 데이터를 모두 읽었다는 사실을 인지하고 이후 작업이 필요할 때 사용한다.
            ---------------------------------------------------------------------------------------------------------------------------------
            | error| 스트림에서 오류가 생겼을 때 발생하는 이벤트
            ---------------------------------------------------------------------------------------------------------------------------------

        3.1.2. on 함수
            : 노드에서 이벤트를 처리할 때는 on함수를 사용한다. 특정 이벤트가 발생했을 때 콜백함수를 처리하는 것이다.
            
            on("이벤트", 콜백)
            
             const fs = require("fs");



            stream-1.js파일 참조
                
                // readMe.txt 파일을 읽어와서 readStream 변수에 할당한다. 이후부터는 readStream에 발생하는 이벤트에 따라 알맞은 콜백함수를 지정하면 된다.
                const readStream = fs.createReadStream("./readMe.txt");

                // 스트림에서 데이터를 읽어올 때마다(data이벤트가 발생할 때마다) 버퍼 크기만큼씩 가져와서 터미널 창에 표시한다. 여기서 chunk는 한 번에 읽어오는 데이터
                readStream.on("data", (chunk) => {
                console.log("new chunk received");
                console.log(chunk);
                });

                // 스트림에서 데이터를 모두 읽어왔다면(end 이벤트가 발생했다면) 파일 읽기가 끝났다고 화면에 표시한다.
                readStream.on("end", () => {
                console.log("finished reading data");
                });

                // 리더블 스틀미에서 오류가 발생하면(error 이벤트 발생) 오류 메시지를 터미널 창에 표시한다.
                readStream.on("error", (err) => {
                console.log(`Error reading the file: ${err}`);
                });


                // $ node stream-1.js 
                // new chunk received
                // <Buffer 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 ... 65486 more bytes>
                // new chunk received
                // <Buffer 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 ... 65486 more bytes>
                // new chunk received
                // <Buffer 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 64 66 73 64 66 73 64 ... 23444 more bytes>
                // finished reading data
                            

        3.1.3. fs.read 함수와의 차이
            : fs.read함수는 파일 내용을 한꺼번에 가져온다. 그래서 콜백함수를 실행하기 전에 파일 내용을 모두 메모리에 넣어 놓아야 한다.
            즉, 데이터 전체를 커다란 하나의 덩어리로 처리한다. 반면에 리더블 스트림은 데이털르 조금씩 나눠서 가져온다.
            가져올 때마다, 즉 data 이벤트가 발생하 ㄹ때마다 가져온 데이터를 처리할 수 있다.




    3.2. Writable Stream

        : 라이터블 스트림은 데이터를 기록하는 스트림이다.
        라이터블 스트림을 만드려면 fs모듈의 createWritableStream 함수를 사용한다.

        fs.createWritableStream(경로, 내용[, 옵션])

            경로: 라이터블 스트림을 사용해 기록할 파일 지정
            옵션: flags, encoding, fd, mode, autoClose, start...
                - flags: 파일에 기록할 때 사용할 플래그 지정. 기본값은 w
                - encoding: 인코딩을 지정한다. 기본값은 null
                - fd: 이 옵션을 사용하면 파일을 여는 작업을 생략한다. 기본값은 null
                - mode: 파일 모드 지정. 기본값은 0o666
                - autoClose: 파일 쓰기가 끝난 후 파일을 자동으로 닫을지 여부 지정. 기본값은 true
                - start: 파일을 기록할 위치를 지정. 기본값은 0

        stream-2.js 참조

            const fs = require("fs");
            const readStream = fs.createReadStream("./readMe.txt", "utf-8");
            const writeStream = fs.createWriteStream("./writeMe.txt");

            readStream.on("data", (chunk) => {
            console.log("new chunk received");
            writeStream.write(chunk);
            });

            // $ node stream-2.js
            // new chunk received
            // new chunk received
            // new chunk received

            // ./writeMe.txt 파일도 생성되었음. 한 번에 기록한 게 아니라 3번에 걸쳐 기록되었음



    3.3. pipe
    
        : 2개의 스트림을 연결하는 파이프
        노드에서는 리더블 스트림을 읽어와서 라이터블 스트림으로 파일에 기록하는 방법을 자주 사용한다.
        stream-2.js에서는 data 이벤트가 발생하기를 기다렸다가 버퍼에 데이터가 가득 차면 수동으로 데이털르 가져와서 기록한다.

        pipe를 사용하면 data 이벤트가 발생했을 때 따로 가져오고 기록하던 것을 한꺼번에 처리할 수 있다.
        이벤트 처리를 하지 않아도 되고, 라이터블 스트림에서 write 함수를 사용해 기록하지 않아도 된다.
        pipe를 사용할 때는 piep함수를 사용한다.

            fs.readStream.pipe(writeStream [, 옵션])

            파이프 함수의 동작 방법
                - 1. 리더블 스트림에서 데이터를 읽는다.
                - 2. 읽은 데이터를 라이터블 스트림으로 기록한다.
                - 3. 라이터블 스트림에 다 기록할 때까지 리더블 스트림에서 읽고 쓰기를 계속 반복한다.
                - 4. 리더블 스트림에서 더 이상 읽을 데이터가 없거나 라이터블 스트림에 더 이상 쓸 데이터가 없으면 pipe함수가 자동종료된다.

            
            pipe함수를 사용하지 않았을 때:

                fs.readStream("data", (chunk) => {
                    fs.writeStream.write(chunk)
                })

            pipe함수를 사용했을 때:

                fs.readStream.pipe(writeStream)

        pipe.js 참조

            const fs = require("fs");
            const readStream = fs.createReadStream("./readMe.txt", "utf-8");
            const writeStream = fs.createWriteStream("./writePipe.txt");

            readStream.pipe(writeStream);

            // $ node pipe.js
            // ./writePipe.txt 파일 생성하고 안에 내용 적힘



        pipe함수를 사용하면 서버에서 자료를 읽어와서 클라이언트에 기록해야 할 때 데이터를 효율적으로 전송하고 처리할 수 있다.


