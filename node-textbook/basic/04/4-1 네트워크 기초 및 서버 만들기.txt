1. IP주소와 포트
    : 클라이언트와 서버 사이에 데이터를 주고 받으려면 중간에 통로가 필요하다.
    이 통로를 흔히 socket이라고 한다. 소켓은 IP와 port를 통해 서로 식별한다.

    택배차량: 소켓
    IP: 동(공통주소)
    port: 집주소(호수)

    1.1. IP
    : 인터넷에는 수많은 클라이언트 컴퓨터와 서버 컴퓨터가 연결돼 있다.
    이러한 컴퓨터들을 서로 구별하기 위해 주소가 할당돼 있다. 이를 Internet Protocol 주소라고 한다.
    서버는 IP주소를 통해 웹페이지를 구분한다. 아이피는 네자리 또는 여섯 자리로 되어 있어 기억하기 어렵다.
    따라서 숫자 대신 영문으로 된 주소를 사용하면 DNS서버에서 자동으로 IP주소로 변환해 준다.

    DNS는 도메인 명을 IP주소로 변환해 준느 서버이다.

    1.2. Port
    :   클라이언트에서 서버로 정보를 요청했을 때 서버에 있는 프로그램 중에서 어떤 프로그램을 실행할 것인지
    알려줄 때 항구를 의미하는 port를 사용한다.

    만약 172.217.25.174 서버에서 80번 포트로 접속한다면 소켓 주소는 아래와 같다.

    http://172.217.25.174:80


2. 서버 만들기
    : 노드로 서버를 만들 때는 HTTP모듈을 가져온 후 createServer함수를 사용한다.
    이 때 요청과 응답을 어떻게 처리할 것인지는 콜백 함수의 형태로 처리할 수 있다


    2.1. createServer() 를 이용한 서버 구동
 
    http.createServer([옵션], [, 콜백]);

    // server-1.js 참고

    const http = require("http");

    // 서버 객체 생성
    const server = http.createServer((req, res) => {
    console.log("request from client");
    });

    // 서버 실행하기: server.listen(포트[, 호스트] [, 콜백])
    server.listen(3000, () => {
    console.log("3000포트에서  서버 실행 중");
    });

3. 요청객체와 응답객체
    : 노드에서는 클라이언트에서 서버로 요청하면 요청객체가,
    서버에서 클라이언트로 응답할 때는 응답객체가 만들어진다.

    // server-2.js 참고
    const http = require("http");

    const server = http.createServer((req, res) => {
    console.log(req);
    });

    server.listen(3000, () => {
    console.log("3000포트에서 서버 실행 중");
    });
    
    //
    ...
                },
            _consuming: false,
            _dumped: false,
            [Symbol(kCapture)]: false,
            [Symbol(kHeaders)]: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                'cache-control': 'max-age=0',
                'sec-ch-ua': '"Not/A)Brand";v="8", "Chromium";v="126", "Google Chrome";v="126"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-platform': '"Windows"',
                dnt: '1',
                'upgrade-insecure-requests': '1',
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
                accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                'sec-fetch-site': 'none',
                'sec-fetch-mode': 'navigate',
                'sec-fetch-user': '?1',
                'sec-fetch-dest': 'document',
                'accept-encoding': 'gzip, deflate, br, zstd',
                'accept-language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7,ja;q=0.6,de;q=0.5'
            },
            [Symbol(kHeadersCount)]: 32,
            [Symbol(kTrailers)]: null,
            [Symbol(kTrailersCount)]: 0
            }


    응답객체
        : 응답객체에는 서버에서 클라이언트에게 넘겨주는 응답정보가 담긴다.
        응답객체는 헤더와 분문으로 구성되므로 헤더를 만드는 것과 본문을 만드는 것 두 가지를 고려해야 한다.
        그리고 요청에 대한 응답이 끝난 상태에서 서버와 계속 연결하고 있을 필요 없으므로
        응답이 끝난 후에는 응답을 종료한다.

        3.2.1. 응답헤더 만들기 
            : res객체를 사용하려면 우선 헤더를 만들어야 한다.
            서버의 자료가 JSON일 수도 있고 텍스트일 수도 있으며, 다루는 유형의 자료, 서버 상태 등을 담을 수 있다.

            응답 헤더를 만들 때는 기본으로 setHeader 함수를 사용하지만,
            상태코드를 헤더에 함께 기록하려면 writeHead 함수를 사용한다.

            res.setHeader(이름, 값) --> res.setHeader("Content-Type", "text/plain");
            res.writeHead(상태코드[, 상태메시지], [, 헤더]) --> res.writeHead(200, {"Content-Type", "text/plain"});


        3.2.2. 응답 본문 작성하기

            헤더를 만든 후에 본문을 작성할 때는 write함수를 사용한다. 본문 내용만 지정할 수 있고
            인코딩이나 코랙함수를 함께 지정할 수도 있다.

            res.write(내용[,인코딩][, 콜백]);

            응답 내용을 모두 전달한 후에는 응답이 끝났다고 알려야 한다.
            클라이언트에게 더이상 응답을 기다리지 않아도 된다고 알려주기도 하고,
            더이상 요청 처리를 하지 않아도 된다. 

            응답을 종료할 때는 end함수를 사용한다.
            인자 없이 사용할 수도 있고, 응답을 종료한 후에 표시할 내용이나 인코딩, 콜백함수를 지정할 수 도 있다.

            res.end(내용[, 인코딩][, 콜백]);


            // server-3.js 참고

            const http = require("http");

            const server = http.createServer((req, res) => {
            console.log(req.method); // 요청 메서드 확인

            res.setHeader("Content-Type", "text/plain"); // 응답 헤더 설정
            res.write("Hello Node"); // 응답 바디 설정
            res.end(); // 응답종료 및 전송
            });

            server.listen(3000, () => {
            console.log("3000포트에서 서버 실행 중");
            });

            /*

            $ node server-3.js
            3000포트에서 서버 실행 중
            GET
            GET

            */

            이 때 GET이 두 번 나타나는 이유는 크롬 브라우저에서 파비콘을 함께 가져오기 때문이다.


4. HTML 서빙하기

    server-4.js 참고


5. 라우팅
    : 웹프로그래밍에서 라우팅이란 클라이언트에서 들어오는 요청에 따라 그에 맞는 함수를 실행하는 것을 말한다.
    요청 URL에 따라 다른 내용을 표시하는 것을 라우팅이라고 한다.

    라우팅을 이용하면 사용자 입력 URL에 따라 다른 내용을 보여줄 수 있다.
    요청 메서드에 따라 처리할 함수를 다르게 연결할 수도 있다.

    server-5.js 참고