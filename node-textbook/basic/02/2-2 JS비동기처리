함수표현식:
    이름 없는 함수는 변수에 할당에서 변수 이름을 함수 이름처럼 사용할 수 있다.
    이 경우 함수를 식(expression)처럼 사용하므로 이렇게 작성한 함수를 함수 표현식이라고 한다.

    const greeting = function(name) {
        console.log(`${name} 님, 안녕하세요);
    }

    greeting("홍길동");


즉시 실행 함수:
    함수표현식으로 작성한 함수를 반드시 변수에 할당해야만 사용할 수 있는 것은 아니다.
    비동기 처리 방법으로 함수 안에 또 다른 함수를 넣어 실행할 수 있다.
    이런 경우 따로 변수를 거치지 않고 선언ㅇ하는 동시에 실행할 수 있다. 이런 함수를 즉시 실행함수라고 한다.

    //함수 선언과 호출을 동시에
    (function a, b {
        console.log(`두 수의 합 ${a+b}`);
    })(100, 200)

    두 수의합 300



-----
02-2 자바스크립트 비동기처리

자바스크립트에서 비동기 처리를 할 떄 사용하는 방법은 크게 3가지다.

콜백함수        /  기존부터 사용   /   함수 안에 또 다른 함수를 매개변수를 넘겨서 실행 순서 제어. 콜백함수가 많아지면 가독성이 저하
프라미스        /  ECMA2015       /   프라미스 객체와 콜백함수를 사용해서 실행순서 제어
async/await    /  ECMA2017       /   async와 await 예약어를 사용해서 실행순서 제어


콜백함수:
    콜백함수란 다른함수의 매개변수로 사용하는 함수를 말한다. 예를 들어 A함수 안에 B 함수를 매개변수로 지정하면 A함수를 모두 실행한 후 B함수를 실행한다.
    오래전부터 자바스크립트에서 쓰이던 방식.

    콜백 안에 콜백 함수가 반복되면 콜백 지옥에 빠지게 된다. 이를 방지하기 위해 ECMA2015에서 promise객체를 도입하였다.






프라미스(promise) 객체:
    이름에서 알 수 있듯이 처리에 성공했을 때와 성공하지 않았을 때의 반환 결과를 미리 약속한 것이다.




    let likePizza = true;

    const pizza = new Promise((resolve, reject) => {
    if (likePizza) {
        resolve("피자를 주문합니다.");
    } else {
        reject("피자를 주문하지 않습니다.");
    }
    });

    여기서 Promise객체는 실행 결과에 따라 true라면 resolve함수에 있는 값을 "반환하고", 실패하면 reject에 있는 값을 반환한다.
    즉 성공이나 실패에 따라 반환할 값만 있을 뿐 실행할 명령어를 가지고 있지는 않다.
    프라미스 객체에서는 처리에 성공했는지 실패했는지 판단만 한다.

    then/catch:
    
    프라미스에서는 성공과 실패를 판단하고 결괏값만 반환한다. 그 값을 받아서 처리하는 부분을 직접 작성해야 하는데,
    이 때 사용하는 함수가 then(성공)과 catch(실패)이다.
    성공여부와 상관없이 실행해야 하는 과정이 있다면 finally를 연결하여 사용할 수 있다.

    let likePizza = true;

    const pizza = new Promise((resolve, reject) => {
    if (likePizza) {
        resolve("피자를 주문합니다.");
    } else {
        reject("피자를 주문하지 않습니다.");
    }
    });

    pizza.then((result) => console.log(result)).catch((err) => console.log(err));









async/await:
    프라미스 역시 체이닝을 사용해서 계속 연결해서 사용할 경우 코드가 복잡해질 수도 있다.
    이런 문제를 줄이기 위해 ECMA2017부터 async와 await 예약어가 등장했다.

    함수를 선언할 때 함수 앞에 async를 붙여서 선언하면 그 함수 안에서는 await를 붙여서 비동기 처리를 할 수 있다.

    기본형
    async function() {
        ...
        await 함수
    }

    await 예약어는 async 함수 내부에서만 사용할 수 있다. 따라서 await를 사용해서 특정 함수를 비동기처리 하겠다면,
    그 함수를 감싸는 함수를 async로 만들어야 한다.



    async function init() {
        // 서버에서 비동기로 가져오기
        const response = await fetch("https://jsonplaceholder.typicode.com/users");

        //   가져온 값을 비동기로 객체로 변환해서 users에 저장
        const users = await response.json();
        console.log(users);
    }

    init();