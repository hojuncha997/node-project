1. 노드의 코어모듈:
    노드에는 백엔드 개발에 필요한 모듈이 이미 내장돼 있다. 이를 코어모듈이라고 한다.
    공식 홈페이지에서 확인할 수 있다.


2. 자주 사용되는 코어모듈

기능                모듈명          설명
=======================================================================================================================================================
파일 시스템         fs              파일이나 폴더에 접근할 수 있는 기능을 제공한다. 파일 읽기/쓰기/삭제/이동/이름변경이나 폴더작업 처리
-------------------------------------------------------------------------------------------------------------------------------------------------------
HTTP               HTTP            http서버를 만들고 요청을 처리하는 기능 제공. 익스프레스와 같은 프레임워크 없이도 서버 생성 가능
-------------------------------------------------------------------------------------------------------------------------------------------------------
경로               path             파일 경로도ㅘ 관련된 작업 기능 제공. 파일 경로 지정 또는 상대 경로 계산 등의 작업.
-------------------------------------------------------------------------------------------------------------------------------------------------------
스트림             streams          데이터 스트림을 처리하는 기능을 제공한다. 예를 들어 파일이나 네트워크와 같은 스트림에서 데이터를 읽거나 쓰는 작업을 할 수 있다.
-------------------------------------------------------------------------------------------------------------------------------------------------------
암호화             crypto           암호화와 관련된 기능을 제공한다. 해시함수, 암호화 알고리즘, 암호화 및 복호화를 지원한다.
-------------------------------------------------------------------------------------------------------------------------------------------------------
운영체제           os               운영체제와 상호작용하는 기능을 제공한다. 운영체제 정보를 알아내거나 시스템 리소스 정보를 확인 가능 등.
-------------------------------------------------------------------------------------------------------------------------------------------------------
유틸리티           util             다양한 유틸리티 함수 제공. 객체상속, 비동기 처리를 promise로 변환하는 등의 작업 등.
-------------------------------------------------------------------------------------------------------------------------------------------------------
이벤트             events           이벤트 기반 프로그래밍을 지원하는 기능을 제공한다. 이벤트 생성, 등록, 처리, 커스텀 이벤트 사용 등을 통한 비동기 처리
-------------------------------------------------------------------------------------------------------------------------------------------------------




3. node: 접두사

    const fs = require("fs"); ==> 코어모듈을 가져온다는 의미를 더 명확히 하기 위해 아래와 같이 변경
    const fs = require("node:fs");



4. 글로벌 모듈과 글로벌 객체:
    require함수 없이 그대로 사용할 수 있는 모듈을 "글로벌 모듈"이라고 한다. 이 모듈들은 코드 작성 시 임포트 필요 없이 바로 사용할 수 있다.
    require() 함수 역시 글로벌 모듈이라고 할 수 있다.

    글로벌 모듈에 있는 객체를 "글로벌 객체"라고 한다. 글로벌 객체는 global이라는 모듈에 포함돼 있어서 원래는 아래와 같이 작성해야 한다.

    global.console.log("안녕");

    그러나 글로벌 모듈은 어디에서나 사용 가능하므로 global이라는 이름 빼고 줄여서 사용한다. -> console.log


5. __dirname, __filename:
    글로벌 모듈에 있는 여러 변수.
    
    __dirname 변수는 현재 모듈이 있는 폴더 이름을 가져온다.
    __filename 변수는 현재 모듈이 있는 파일 이름을 가져온다.

    모두 절대 경로로 표시된다.

    here.js 참고


6. setTimeout, setInterval, clearInterval :

   setTimeout, setInterval, clearInterval 함수들도 노드에서 글로벌 객체로 사용할 수 있다.

   setTimeout : 지정한 시간이 지난 후에 함수 안의 내용을 실행한다.
   setInterval: 지정한 시간마다 함수 안의 내용을 실행한다.
   clearInterval: setInterval 함수로 반복실행하던 것을 멈춘다.

    아래 코드는 3초 후에 'Hi' 메시지를 표시한다. 500ms(0.5초)마다 남은 시간을 보여준다. setTimeout 함수를 따로 가져오지 않아도 즉시 실행 가능

    timer.js 참고






let remainingTime = 3000; // 남은 시간을 3초로 설정(3000ms)
const waitingInterval = 500; // 대기 시간 간격을 0.5초로 설정

// 0.5초마다 호출되는 함수
const timer = setInterval(() => {
  // 남은 시간 표시
  console.log(`${remainingTime / 1000}초 남음`);
  remainingTime -= waitingInterval; // 남은 시간 감소

  if (remainingTime <= 0) {
    // 남은 시간이 0 이하인 경우 'Hi' 메시지를 표시하고 타이머 종료
    console.log("Hi");
    clearInterval(timer);
  }
}, waitingInterval);

// $ node timer.js
// 3초 남음
// 2.5초 남음
// 2초 남음
// 1.5초 남음
// 1초 남음
// 0.5초 남음
// Hi
