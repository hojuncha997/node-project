1. 블로킹I/O
: 노드에서는 대부분의 작업을 비동기로 처리한다. 이는 노드가 논블로킹 I/O로 동작하기 때문이다.
블로킹이란 코드 실행을 중간에 막는 것으로 코드 실행이 멈춘다는 뜻이다.
많은 시간이 소요되는 동기 함수를 사용하는 경우, 블로킹이 발생할 수 있다.

블로킹이 더 문제가 되는 것은 서버를 사용할 때이다.

        const http = require("http");

        const server = http.createServer((req, res) => {
        if (req.url == "/home") {
            res.end("Home");
        } else if (req.url == "/about") {
            for (let i = 0; i < 1000; i += 1) {
            for (let j = 0; j < 1000; j += 1) {
                console.log(i, j);
            }
            }
            res.end("ABOUT");
        } else {
            res.end("NOT FOUND");
        }
        });

        server.listen(3000, () => {
        console.log("3000포트에서 서버 실행 중");
        });

        /*
        이 프로그램을 실행시키고 /about 페이지에 접속하면 
        동기 코드가 끝날 때까지 다른 요청을 처리하지 못한다.
        /about 에 대한 요청 뿐만 아니라 다른 요청도 처리하지 못한다.
        */




2. 논블로킹I/O

: 코드를 작성할 때 블로킹이 생기지 않게 하려면 비동기 처리를 이용해야 한다.
비동기 처리를 하면 코드를 실행하다가 시간이 걸리는 작업은 잠시 옆으로 빼놓고 
즉시 실행해야 할 작업 먼저 처리한다.

옆으로 빼놓은 작업은 "이벤트 루프"에서 처리해 준다.
이벤트 루프는 비동기를 처리하는 곳이라고 이해하면 쉽다.

백엔드 개발에서는 필요에 따라 동기 함수와 비동기 함수를 사용할 수도 있다.
그런데 백엔드 개발을 할 때 네트워크를 통해 클라이언트와 서버 간에 자료를
주고 받아야 하는 작업에서는 주고 받는 데이터의 양도 다르고 네트워크 속도도
일정하지 않아 시간 지연을 항상 고려해야 한다. 그래서 백엔드 개발에서 네트워크와 관련된 작업을 할 때는
중간에 멈추는 일이 없도록 비동기 처리를 하는데 이를 "논블로킹 I/O"라고 한다.

노드는 싱글 스레드로 이벤트 루프를 사용해서 비동기 작업을 처리하고,
동시 작업을 해야 할 때는 논블로킹 방식을 사용한다.

물론 노드에서 멀티 스레드를 사용하거나 병렬처리하는 방법도 있다.


