노드의 비동기 패턴


1. 콜백 함수

: 다른 함수의 매개변수로 사용되는 함수

동기의 경우

const fs = require("fs");

// 동기적으로 파일 읽기
let files = fs.readdirSync("./");
console.log(files);

console.log("Code is done");

/*

$ node node-sync.js 
[
  '05-1 노드와_비동기_처리.txt',
  '05-2 논블로킹IO.txt',
  '05-3 이벤트_루프.txt',
  '05-4 노드의_비동기_패턴.txt',
  'blocking-3.js',
  'node-sync.js'
]
Code is done

동기이기 때문에 코드가 순서대로 실행됨
*/


비동기

const fs = require("fs");

// 비동기
let files = fs.readdir("./", (err, files) => {
  if (err) {
    console.error(err);
  }
  console.log(files);
});

// 동기: 먼저 실행됨
console.log("Code is done");

/*
$ node async-3.js 
Code is done
[
  '05-1 노드와_비동기_처리.txt',
  '05-2 논블로킹IO.txt',
  '05-3 이벤트_루프.txt',
  '05-4 노드의_비동기_패턴.txt',
  'async-3.js',
  'blocking-3.js',
  'node-sync.js'
]
*/


2. 프라미스

: 노드 모듈에는 프라미스를 반환하는 함수가 따로 있다. 이 함수를 실행하면 비동기로 처리하고,
그 결과가 성공했을 때는 then 함수를, 실패했을 때(오류 발생 시)는 catch 함수를,
성공과 실패에 관계없을 때는 finally라는 함수를 사용해서 연결할 수 있다.

*then, catch는 반환값이 프라미스이므로 프라미스를 계속해서 연결해 사용할 수 있다.(프라미스 체이닝)

    const fs = require("fs").promises;

    fs.readdir("./")
    .then((result) => console.log(result))
    .catch((err) => console.error(err));

    /*
    $ node promise.js 
    [
    '05-1 노드와_비동기_처리.txt',
    '05-2 논블로킹IO.txt',
    '05-3 이벤트_루프.txt',
    '05-4 노드의_비동기_패턴.txt',
    'async-3.js',
    'blocking-3.js',
    'node-sync.js',
    'promise.js'
    ]
    */

* FS모듈을 가져올 때 뒤에 .promises를 붙여야 FS모듈에 있는 프라미스 반환 함수를 사용할 수 있다.



3. async/await

ECMA스크립트 2017(ES8)부터 새로 등장한 비동기 처리 방법이다.
비동기로 처리할 함수가 있다면 그것을 감싸는 함수를 **만들고 async를 붙인다.
그리고 비동기로 처리할 함수 앞에 await 키워드를 사용하면 된다.
여기서 주의할 것은 await를 붙일 수 있는 함수는 프라미스를 반환하는 메서드여야 한다는 점이다.


        const fs = require("fs").promises;

        // async/await를 사용하는 비동기 함수 readDirAsync
        async function readDirAsync() {
        try {
            const files = await fs.readdir("./");
            console.log(files);
        } catch {
            console.error(err);
        }
        }

        // readDirAsync 함수 실행
        readDirAsync();

        /*
        $ node await.js 
        [
        '05-1 노드와_비동기_처리.txt',
        '05-2 논블로킹IO.txt',
        '05-3 이벤트_루프.txt',
        '05-4 노드의_비동기_패턴.txt',
        'async-3.js',
        'await.js',
        'blocking-3.js',
        'node-sync.js',
        'promise.js'
        ]
        */