
1. 이벤트 루프



: 노드에서 비동기 처리를 하는 원리가 이벤트 루프이다. 

    1.1. 노드에서 자바스크립트를 처리하는 기본방법(동기)
    
    - 노드는 V8 엔진을 사용해서 자바스크립트 코드를 처리한다.
    - V8 안에 call stack 이라는 요소가 있어 순서대로 작업을 가져와 처리한다.
    - 콜스택은 콜이 스택형태로 모여 있다는 뜻이다.
    - 콜이란 바로 실행하려는 함수들이다.

    동기처리의 경우, 함수가 콜 스택에 넣었다가 처리하고, 콜스택에서 삭제한다.
    스택(선입후출)

    
    1.2. 이벤트 루프로 비동기 처리
    : V8 엔진의 콜스택은 실행할 순서대로 함수를 가져오므로 비동기 처리를 할 수 *없다.
    그래서 V8 엔진에서 비동기를 처리할 수 있는 라이브러리를 가지고 있다.
    그것이 "libuv"이다. 노드에서는 내부에서 libuv를 사용해서 비동기 작업을 훨씬 더 쉽게 다룰 수 있다.

    libuv는 Node API와 Callback Queue라는 구성 요소를 가지고 있다. 콜백 큐는 콜백 함수가 큐 형태로 저장되는 공간이다.
    큐(선입선출)

    1. 동기함수
    2. 비동기함수 e.g. setTimeout(, 3000)   // 3초
    3. 동기함수

    코드가 위와 같은 순서로 있을 때,
    - 노드는 1번 동기함수를 콜스택에 넣었다가 처리하고 제거한다.
    - 2번 비동기 함수를 콜스택으로 옮긴다. 
    - 콜스택에 비동기 함수가 들어왔으므로 이를 일단 libuv로 옮긴다.
        setTimeout의 경우 노드에서 제공하는 비동기 함수이므로 Node API로 옮겨진다.
    - 3번 동기함수를 콜스택에 넣는다. 처리하고 제거한다.
    - 4. 더이상 처리할 작업이 없으므로 libuv를 살핀다.
    - setTimeout에서 3초가 지나면 처리할 콜백함수를 "콜백 큐"로 옮긴다.
    - 노드는 콜스택이 비어있는지 계속 체크하고, 콜스택이 비어 있다면,
        즉 당장 실행할 작업이 없다면 그 때서야 "콜백 큐"에 있는 콜백 함수를 "콜 스택"으로 옮긴다.
    - 콜스택에서 해당 비동기 함수를 처리한다. 그리고 콜스택에서 제거한다.
    - 만약 콜백 큐에 다른 작업이 대기하고 있다면 그 작업도 가져와서 처리한다.
    - 이렇게 콜 스택과 콜백 큐를 번갈아 살피면서 순서를 결정한다.

    ==> 노드는 콜 스택을 사용해 코드를 작성한 순서대로 실행한다. 비동기 함수와 같이 시간이 많이 걸리는 작업을 만나면
        잠시 콜백 큐에 저장해 두었다가 콜 스택이 비면 하나씩 꺼내 와 처리한다.

        ==> 이 "과정"을 "이벤트 루프"라고 한다.
        ==> 이벤트 루프의 동작 방식은 비동기 작업을 효율적으로 처리하고 코드의 블로킹을 최소화 하여 더 나은 성능을 제공한다.


        

