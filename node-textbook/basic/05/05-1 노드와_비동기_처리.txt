1. 동기처리와 비동기 처리의 차이

    1.1. 동기처리

    : 자바스크립트는 기본적으로 코드에 작성한 순서대로 작업을 처리한다.
    이는 자바스크립트가 싱글 스레드(Single-thread) 언어이기 때문이다.

    thread(스레드)란 작업을 처리하기 위해 자원을 사용하는 단위를 가리킨다.
    간단히 말해 작업이 실행되는 최소 단위라고 생각하며 된다.
    자바스크립트에서는 이런 스레드가 하나밖에 없어서 한 번에 하나의 작업만 처리할 수 있다.

    반면 자바와 같은 백엔드 언어는 멀티 스레드 언어이다. 스레드를 여러 개 가지고 있어서 동시에 여러 작업을
    수행할 수 있다.


    1.2. 비동기 처리
    : 싱글 스레드가 한 번에 하나의 작업만 처리할 수 있다면 중간에 긴 시간이 소요되는 작업은 어떻게 해야 할까?

    console.log("첫 번째 작업");
    setTimeout(() => {
        console.log("두 번째 작업")
    }, 3000)

    console.log("세 번째 작업")

    위 코드는 순서대로 실행되지 않고, 1->3->2 순서대로 실행된다.
    이는 노드에서 시간이 소요되는 작업을 비동기 처리하기 떄문이다.
    '첫 번째 작업"을 표시한 다음, setTimeout함수를 만나면 시간이 걸리는 작업이라는 것을 알고 옆으로 빼둔다.
    그리고 다음 작업("세 번째 작업")을 진행하고, 이 작업이 끝나면 setTimeout 부분을 가져와 처리한다.

    만약 setTimeout의 지연시간을 0초로 지정해도 이 과정은 변하지 않는다.
    setTimeout 자체가 시간 지연을 포함하는 함수여서 즉시 처리할 수 있는 작업을 다 끝낸 후에 
    이어서 시간이 걸리는 작업을 한다. setInterval, cleartInterval 또한 시간값을 사용하는 함수여서
    노드에서 비동기 처리를 한다.

    setTimeout처럼 처음부터 비동기로 처리할 목적으로 만든 함수뿐만 아니라 비동기로 동작하는 함수를
    직접 작성할 수도 있다. 프로그램 안에는 여러 함수가 있는데 각각 처리하는 시간이 다르다.
    노드에서는 무조건 빨리 처리할 수 있는 것부터 실행한다.

    하지만 아무리 시간이 오래 걸려도 A함수를 실행한 후에 B함수를 연결해서 실행하도록 만드는 것이
    비동기 처리이다. 비동기 처리로 직접 동작하게 하려면 
    
    - 콜백함수
    - 프라미스
    - async/await
    
    를 사용한다.

    const fs = require("node:fs");
    fs.readdir("./", (err, files) => {  //  fs.readdir를 먼저 처리하고 콜백함수를 처리한다.
        if(err) {
            console.log(err);
        }
        console.log(files);
    })