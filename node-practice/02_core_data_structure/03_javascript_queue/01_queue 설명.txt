1. queue
:
큐는 먼저 삽입된 데이터가 먼저 추출되는 자료구조다.
큐에서는 꼬리(taile)에 데이터가 삽입되고 머리(head)에서 원소가 나온다.



2. 연결리스트로 큐 구현하기
- 큐를 연결 리스트로 구현하면 삽입과 삭제에 있어 O(1)을 보장할 수 있다.
- 연결리스트로 구현할 떄는 머리(head)와 꼬리(tail) 두 개의 포인터를 가진다.
- 머리(head): 남아있는 원소 중 가장 먼저 들어온 데이터를 가리키는 포인터.
- 꼬리(tail): 남아있는 원소 중 가장 마지막에 들어온 데이터를 가리키는 포인터.

배열로 큐를 구현하는 것은 시간적으로 비효율적이기 떄문이다.
따라서 큐를 구현하는 경우 일반적으로는 연결리스트를 이용해서 구현할 수 있다.

만약 큐에 새로운 원소가 추가된다고 하면 꼬리 위치의 포인터를 한 칸 이동시켜야 한다.
그러기 위해서는 현재 꼬리가 가리키고 있는 원소에 접근해서 원소의 다음 원소로 연결시켜준다.
이후에 꼬리 위치를 새 원소를 가리키도록 새 원소의 메모리 주소를 넣어주면 삽입이 완료된다.

데이터를 삭제할 때는 머리 위치에서 삭제해준다. 단순하게 머리 위치를 기존 머리에서 다음 원소의 메모리 주소를
가리키도록 만들어주면 이것으로 삭제가 완료되었다고 이해할 수 있다.




3. 큐 동작속도 : 배열 VS. 연결 리스트

- 다수의 데이터를 삽입 및 삭제할 때에 대해 수행 시간을 측정할 수 있다.
- 단순히 배열 자료형을 이용할 때보다 연결 리스트를 사용할 때 수행 시간 관점에서 효율적이다.
- JS에서는 Dictionary 자료형을 이용하여 queue를 구현하면 간단하다.

class Queue {
  // 생성자
  constructor() {
    this.items = {};
    this.headIndex = 0;
    this.tailIndex = 0;
  }

  // 데이터를 집어 넣는 메서드
  enqueue(item) {
    this.items[this.tailIndex] = item; // items배열의 꼬리 인덱스에 들어온 매개변수를 할당하고 꼬리 인덱스 값을 증가시킨다.
    this.tailIndex++;
  }

  // 데이터를 삭제하는 메서드
  dequeue() {
    const item = this.items[this.headIndex];
    delete this.items[this.headIndex]; //items배열에서 헤드 인덱스를 가진 요소를 삭제한다.
    this.headIndex++; // 헤드 인덱스를 1 증가시킨다.
    return item; // 원래 헤드 인덱슬르 반환한다.
  }

  // 현재 헤드 값을 리턴하는 함수
  peek() {
    return this.items[this.headIndex];
  }

  // 현재 큐의 길이를 반환하는 함수.
  getLength() {
    return this.tailIndex - this.headIndex;
  }
}

// 구현된 큐 라이브러리 사용
const queue = new Queue();

queue.enqueue(5);
queue.enqueue(2);
queue.enqueue(3);
queue.enqueue(7);
queue.dequeue();
queue.enqueue(1);
queue.enqueue(4);
queue.dequeue();

// 먼저 들어온 순서대로 반복해서 출력하기
while (queue.getLength() !== 0) {
  console.log(queue.dequeue());
}

// 3
// 7
// 1
// 4


이렇듯 JS에서는 연결리스트로 큐를 구현하지 않아도 dictionary 자료형을 이용해서 간단히 큐의 기능을 대체하여 사용할 수 있다.
실제로 테스트에서 큐의 기능이 필요하다고 하면 이러한 방식으로 구현하여 사용할 수 있다.