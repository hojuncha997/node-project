1. 스택

- 스택: 먼저 들어온 데이터가 나중에 나가는 자료구조
- 흔히 박스가 쌓인 형태를 스택이라고 한다.
- 박스를 쌓은 뒤 꺼낼 때는 가장 마지막에 올렸던 박스부터 꺼내야 한다.

- 새로운 원소를 삽입할 때는 마지막 위치에 삽입한다.
- 삭제할 때는 마지막 원소가 삭제된다.


2. 스택 예시

- 스택에 여러 개의 데이터를 삽입하고 삭제하는 예시를 확인해보자.
- 전체 연산: 삽입 3 - 삽입 5 - 삭제 - 삽입 7 - 삭제 - 삽입 8 - 삭제 - 삽입 2 - 삽입 9

[9,2,3]

머리(head) = 최상위 원소. 가장 마지막에 들어온 원소를 의미한다. 여기서는 9가 head다.


3. 스택 자료구조의 중요성
- 스택은 매우 기본적인 자료구조이다.
- 다양한 알고리즘/코딩 테스트 문제에서 자주 등장한다.

4. 스택의 시간 복잡도

    연산                시간복잡도          설명
    -----               ---------          ----
    삽입(push)          O(1)               스택에 원소를 삽입하는 연산
    추출(pop)           O(1)               스택에서 원소를 추출하는 연산
    최상위 원소(Top)     O(1)               스택의 최상위 원소(마지막 원소)를 확인하는 연산
    empty               O(1)               스택이 비어있는지 확인하는 연산(ture/false)



5. JS에서 스택을 구현하는 방법

- JS의 기본적인 배열 자료형은 다음의 두 가지 메서드를 제공한다. 이를 사용하여 스택처럼 사용할 수 있다.

- push() 메서드: 마지막 위치에 원소를 삽입하며, 시간 복잡도는 O(1)이다.
- pop() 메서드: 마지막 위치에서 원소를 추출하며, 시간 복잡도는 O(1)이다.


let stack = [];

// 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) - 삭제() - 삽입(1) - 삽입(4) - 삭제()

stack.push(5);
stack.push(2);
stack.push(3);
stack.push(7);
stack.pop();
stack.push(1);
stack.push(4);
stack.pop();

let reversed  = stack.slice().reverse();    // [1.3.]
console.log(reversed); // [1, 3, 2, 5]
console.log(stack); // [5, 2, 3, 1]

 slice() 메서드는 배열의 일부 또는 전체를 얕은 복사하여 새 배열 객체로 반환한다.
  여기서 slice()는 파라미터 없이 호출되었으므로, 원본 배열의 얕은 복사본을 만들고, 
 이 복사본에 reverse()를 적용하여 원본 배열은 변경하지 않은 채로 순서가 반전된 새 배열을 생성한다.




 6. 연결리스트로 스택 구현하기

- 스택을 연결리스트로 구현하면 삽입과 삭제에 있어서 O(1)을 보장할 수 있다.
- 연결리스트로 구현할 때는 머리(head)를 가리키는 한 개의 포인터만 가진다.
- 머리(head) : 남아있는 원소 중 가장 마지막에 들어온 데이터를 가리키는 포인터

- 삽입할 때는 head의 위치에 데이터를 넣는다.
- 삭제할 때는 head 위치에서 데이터를 꺼낸다.



JS를 사용할 떄는 리스트나 스택을 구현하지 않는다. 단순히 배열을 이용해도 된다. 위의 내용은 일반적인 내용을 말하는 것이다.