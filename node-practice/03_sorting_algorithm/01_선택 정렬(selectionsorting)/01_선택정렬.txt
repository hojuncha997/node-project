1. 선택정렬(selection sort):
  - 선택 정렬은 매 단계(전체 원소의 개수 만큼, 정확히는 n-1 만큼)에서 가장 작은 원소를 선택해서 앞으로 보내는 정렬 방법이다.
  - 앞으로 보내진 원소는 더 이상 위치가 변경되지 않는다.
  - 시간 복잡도 O(N^2)로 비효율적인 정렬 알고리즘 중 하나다.
  - 선택정렬은 비효율적이지만 구현방법이 매우 간단하고, 정렬 라이브러리의 사용이 불가능하고 데이터의 개수가 적을 떄 빠르게 작성할 수 있는 정렬 알고리즘 중 하나다.

2. 선택정렬 동작 방식
  - 각 단계에서 가장 작은 원소를 선택한다.
  - 현재까지 처리되지 않은 원소들 중 가장 앞의 원소와 위치를 교체한다.
  - 이러한 과정을 반복하여 모든 원소가 정렬이 완료될 수 있도록 한다.


3. 선택정렬 소스 코드 예시


//  선택 정렬 함수

function selectionSort(arr) {
  for (let i = 0; i < arr.length; i++) {
    let minIndex = i; // 가장 작은 원소의 인덱스

    // +1 해줌으로써 처리되지 않은 원소 중 가장 앞에서 시작
    for (let j = i + 1; j < arr.length; j++) {
      if(arr[minIndex] > arr[j]) {
        minIndex =j;
      }
    }
  
    //스왑(swap): 자리를 바꿈

    let temp = arr[i];
    arr[i] = arr[minIndex];
    arr[minIndex] = temp;
  }
}

// 함수 내보내기
module.exports = selectionSort;


/** 1) 선택 정렬의 수행시간 측정 */

// const selectionSort = require("./selectionSort");
const selectionSort = require("./selectionSort");

// 0부터 999까지의 정수 30000개를 담은 배열 생성
let arr = Array.from({ length: 30000 }, () => Math.floor(Math.random() * 1000));

// getTime(): 1970-01-01부터의 시간차를 ms 단위로 계산
let startTime = new Date().getTime();
selectionSort(arr);
let endTime = new Date().getTime();

// 시간차 출력
console.log("선택 정렬 소요 시간: ", (endTime = startTime), "ms");

/** 2) 이미 정렬된 배열에 대한 선택 정렬의 수행 시간 측정 */

// 0부터 999까지의 정수 30000개를 담은 배열 생성
arr = Array.from({ length: 30000 }, () => 7);

// getTime(): 1970-01-01부터의 시간차를 ms 단위로 계산
startTime = new Date().getTime();
selectionSort(arr);
endTime = new Date().getTime();

// 시간차 출력
console.log(
  "이미 정렬된 배열에 대한 선택 정렬 소요 시간: ",
  (endTime = startTime),
  "ms"
);



거의 비슷하다. 비효율적.


4. 정리:
- 선택정렬이란 가장 작은 것을 선택해서 앞으로 보내는 정렬 기법이다.
- 매 단계에서 가장 작은 것을 선택하는 데에 약 N번의 연산이 필요하다. (선형 탐색)
- 결과적으로 약 N-1개의 단계를 거친다는 점에서 최악의 경우 O(N^2)의 시간 복잡도를 가진다