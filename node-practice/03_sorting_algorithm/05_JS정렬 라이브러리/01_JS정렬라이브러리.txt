1. JS 정렬 라이브러리:
    - JS에서는 배열에 포함된 데이터를 정렬하는 sort() 함수를 제공한다.
    - 최악의 경우 시간 복잡도 O(NlogN)을 보장한다.
    - 알고리즘 문제를 해결할 때 정렬 기능이 필요하다면 단순히 sort() 사용을 권한다.
    - 만약 sort() 함수의 사용이 제한된다면 병합정렬과 같은 알고리즘을 직접 구현하여 사용한다.

2. 라이브러리 사용 방식
    - 다음과 같은 형태로 사용할 수 있다.
    - 이 때 compareFunction은 정렬 기준을 정해주는 함수다.
    - 내림차순, 오름차순 등 구체적인 정렬 기준을 설정할 수 있다.
    - 즉 매개변수로 함수 그 자체가 들어갈 수 있는 것이다.

    arr.sort(compareFunction)

3. JS 정렬기준 함수(compareFunction)
    - JS의 정렬 함수에서는 정렬 기준 함수가 사용된다.
    - 두 개의 원소 a,b를 입력으로 받는다.

    - 1. 반환값이 0보다 작은 경우 -> a가 우선순위가 높아 앞에 위치한다.
    - 2. 반환값이 0보다 큰 경우 -> b가 우선순위가 높아 앞에 위치한다.
    - 3. 반환값이 0인 경우 -> a와 b의 순서를 변경하지 않는다.

    - 참고로 정렬 기준 함수를 사용하지 않으면 각 원소는 문자열로 취급된다.
    - 따라서  유니코드 값 순서대로 정렬된다.
    - 따라서 항상 정렬 기준 함수를 명시하는 습관을 들일 필요가 있다.
    - 수를 기준으로 정렬해야 하는데 실수로 문자열 기준으로 정렬하는 실수를 할 수 있기 때문이다.


4. 예시


    -1. 정수에 대한 오름차순 정렬 예시 1)

        let arr = [1,8,5,9,21,3,7,2,15];

        function compare(a, b) {
            if(a < b) return -1;
            else if(a > b) return 1;
            else return 0;
        }

        arr.sort(compare);
        console.log(arr);

        // [1,2,3,5,7,8,9,15,21]

    -2. 정수에 대한 오름차순 정렬 예시 2)

        a가 b보다 작을 때 반환값이 음수가 되어 a앞에 위치한다.
        
        let arr = [1,8,5,9,21,3,7,2,15];
        
        function compare(a,b) {
            return a - b;
        }

        arr.sort(compare);
        console.log(arr);

          // [1,2,3,5,7,8,9,15,21]

    -3. 정수에 대한 오름차순 정렬 예시 3)

        비교함수를 한 줄에 정의하여 곧바로 적용할 수 있다.

        let arr = [1,8,5,9,21,3,7,2,15];

        arr.sort(function(a,b) {
            return a - b;
        })

        console.log(arr);
          // [1,2,3,5,7,8,9,15,21]

    ////////////////////////////////////

    -4. 정수에 대한 내림차순 정렬 예시 


        a가 b보다 클 때 반환값이 음수가 되어 a가 앞에 위치한다.
        
        let arr = [1,8,5,9,21,3,7,2,15];
        
        function compare(a,b) {
            return b - a;
        }

        arr.sort(compare);
        console.log(arr);

          // [21,15,9,8,7,5,3,2,1]

    ////////////////////////////////////
    
    -5. 문자열에 대한 오름차순 정렬 예시

    - 별도로 비교함수(compare function)을 사용하지 않으면 유니코드 순으로 정렬된다.
    - 따라서 함수를 적용하지 않음으로써 간단히 문자열 정렬을 수행할 수 있다.

        let arr = ["pineapple", "banana", "durian", "apple", "carrot"];

        arr.sort();
        console.log(arr);

        // ["apple", "banana", "carrot", "durian","pineapple" ];


    -6. 문자열에 대한 내림차순 정렬 예시

        let arr = ["pineapple", "banana", "durian", "apple", "carrot"];

        function compare(a, b) {
            //  사전 순으로 a가 b보다 뒤에 있다면 -1 반환 (뒤에 있는 문자가 입력됨)
            if(a > b) return -1;

            //  사전 순으로 a가 b보다 앞에 있다면 1 반환 (앞에 있는 문자가 입력됨)
            else if(a < b) return 1;

            // 그게 아니면(같다면) 0 반환
            else return 0;
        }

        arr.sort(compare);
        console.log(arr);
        
        // [ "pineapple", "durian", "carrot", "banana", "apple" ];

    ////////////////////////////////////

    -7. 문자열에 대한 오름차순 정렬 예시(대소문자 구분 X)
        
        - 대소문자를 구분하지 않도록 toUpperCase() 메서드를 사용할 수 있다. 전부 대문자 처리한다
        
        let arr = ["pineapple", "Banana", "durian", "Apple", "carrot"];

        function compare(a, b) {
            let upperCaseA = a.toUpperCase();
            let upperCaseB = b.toUpperCase();

            if(upperCaseA < upperCaseB) return -1;
            else if (upperCaseA > upperCaseB) return 1;
            else return 0;
        }

        arr.sort(compare);
        console.log(arr);

        // ['Apple', 'Banana', 'carrot', 'durian', 'pineapple']

    -8. 