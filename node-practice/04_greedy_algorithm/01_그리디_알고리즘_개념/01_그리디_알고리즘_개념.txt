1. greedy algorithm(탐욕 알고리즘):

  - 현재 상황에서 "당장" 가장 좋아보이는 상황만을 선택하는 알고리즘
  - 흔히 그리디 알고리즘, 혹은 탐욕법이라고 불리기도 한다.
  - 최적해를 구하기 위한 근사적인 방법으로 사용될 때가 많다.

2. 탐욕 알고리즘 예시
  - 트리 구조의 경우, 루트에서 출발하여 단말까지 가는 경우.
    - 현재 노드에서 선택할 수 있는 가장 큰 다음 노드를 선택한다. 이를 계속한다.

    (1) - (4) - (5)가 합이 10으로 최적해지만,
    탐욕법으로 선택하 할 경우 
    (1) - (5) - (2) 즉 8이 탐욕법을 사용한 근사값이 된다.

    정확하지는 않지만 그래도 근사값을 얻을 수는 있다.

3. 탐욕 알고리즘과 근사해

  - 현실의 많은 상황에서는 단순한 탐욕 알고리즘으로는 최적해를 놓칠 수 있다.
  - 그러나 최적해에 가까운 답을 얻을 수 있다는 것을 고려하면 현실에서의 다양한 프로그램에서 근사해를 구하는 목적으로 사용되곤 한다.

  즉, 근사해를 구하는 목적으로 사용되는 경우가 많다.

  코딩 테스트에서는 탐욕법으로 구한 근사해가 최적해로 보장되는 문제가 출제되는 경우가 많다.



4. 탐욕 알고리즘의 접근 방법

  - 탐욕법으로 문제를 해결할 때는 일반적으로 아래의 과정을 거친다.

  4.1. 방법 고안하기: 현재 상황에서 어떤 것을 선택할지 알고리즘을 고안한다.
  4.2. 정당성 확인하기: 자신이 고안한 알고리즘이 항상 최적의 해를 보장하는지 확인한다. (증명단계)

  e.g. 거스름돈 문제

    손님에게 최소한의 동전을 주려면
    - 가장 큰 화폐 단위부터 거슬러준다.
    - 이는 화폐의 크기가 서로 배수의 관계를 가지기 때문에 가능하다.